import html
import json
import random
from datetime import datetime
from typing import Optional, List
import time
import requests
from telegram import Message, Chat, Update, Bot, MessageEntity
from telegram import ParseMode, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.ext import CommandHandler, run_async, Filters
from telegram.utils.helpers import escape_markdown, mention_html

from tg_bot import dispatcher, OWNER_ID, SUDO_USERS, SUPPORT_USERS, WHITELIST_USERS, BAN_STICKER
from tg_bot.__main__ import STATS, USER_INFO
from tg_bot.modules.disable import DisableAbleCommandHandler
from tg_bot.modules.helper_funcs.extraction import extract_user
from tg_bot.modules.helper_funcs.filters import CustomFilters

RUN_STRINGS = (
    "เดเดฐเตเดเตเดเต เดจเดฟเดฑเดเตเด เดเดจเตเดฑเต เด เดเตเดตเดฟเดคเดคเตเดคเดฟเดฒเตเดเตเดเต เดเดฐเต เดคเดเตผเดเตเดเดฏเต เดเตผเดฎเตเดฎเดฟเดชเตเดชเดฟเดเตเดเดพเตป เดเดจเตเดคเดฟเดจเต เด เดเดเตเดเดเตเดเดพเดฒเดฃ เดเดฏเดฟ เดจเต เดตเดจเตเดจเต",
    "เดจเดฎเตเดฎเตพ เดจเดฎเตเดฎเตพ เดชเตเดฒเตเดฎเดฑเดฟเดฏเดพเดคเต เดเดงเตเดฒเตเดเด เดเดฏเดฟ เดฎเดพเดฑเดฟเดเตเดเดดเดฟเดเตเดเดฟเดฐเดฟเดเตเดเตเดจเตเดจเต เดทเดพเดเดฟเดฏเตเดเตเดเดพ...",
    "เดเดจเตเดจเต เดเตเดคเตเดค เดตเดฟเดณเดฟเดเตเดเต... เดตเตเดฃเดฎเตเดเตเดเดฟเตฝ เดจเดฒเตเดฒ เดเดเดฟ เดเดเดฟเดเตเดเต... เดชเดเตเดทเต เดเดชเดฆเตเดถเดฟเดเตเดเดฐเตเดคเต.....",
    "เด เดฌเตเดฒเดกเดฟ เดเตเดฐเดพเดฎเดตเดพเดธเตเดธเต!",
    "เดธเต เดฎเดพเดเตเดเดฟ เด เดเด เดเตเดฏเดฟเดเต เดเต เดชเต เดฆเดฟ เดฌเดฟเตฝ.",
    "เดชเตเดฐเตเดจเตเดจเต เดเดจเตเดฑเต เดเตเดเต!",
    "เดคเดณเตเดณเต เดเดฒเดฟเดชเตเดชเต เดคเตเดฐเดฃเดฟเดฒเตเดฒเดฒเตเดฒเต!!",
    "เดถเดฌเดฐเดฟเดฎเดฒ เดถเดพเดธเตเดคเดพเดตเดพเดฃเต เดนเดฐเดฟเดนเดฐเดธเตเดคเดจเดพเดฃเต เดเดคเต เดเตเดฏเตเดคเดตเดจเต เดเดพเตป เดชเตเดเตเดเตเด เดจเดฒเตเดฒ เดฎเดฃเดฟเดเตเดเดฟเดคเตเดฐเดคเตเดคเดพเดดเดฟเดเตเดเต เดชเตเดเตเดเตเด .",
    "เดเดพเตป เดเดฃเตเดเต...!! เดเดฟเดฃเตเดเดฟ... เดเดฟเดฃเตเดเดฟ...!",
    "เดฎเตเดจเตเดคเดฏเตเดเตเดเดฟเดเตเดเต เดเตเดเตเดคเตเดคเดฟเดเตเดเต เดเดจเตเดจเต เดเดเตเดคเตเดคเต เดเดพเดฃเดฟเดเตเดเตเดเตเดเตเดเตเดเต เดเดชเตเดชเตเตพ เดเดพเดฃเตเด ISI เดฎเดพเตผเดเตเดเต ",
    "เดกเตเดตเตเดธเตเดเตเด, เดเดฟเดเตเดซเดฟเดทเดฑเดฟเดฃเตเดเดพ... เดเดฟเตฝเดกเต...! .",
    "เดชเดพเดคเดฟเดฐเดพเดคเตเดฐเดฟเดเตเดเต เดจเดฟเดจเตเดฑเต เดเดเตเดเตป เดเดฃเตเดเดพเดเตเดเดฟ เดตเตเดเตเดเดฟเดฐเดฟเดเตเดเตเดจเตเดจเต เดชเตเดฑเตเดเตเดเดฏเตเด เดเดฟเดเตเดเดจเตเด....",
    "เดเดคเต เดเดเตเดเดณเตเดเต เดชเดฃเดฟเดธเดพเดงเดจเดเตเดเดณเดพ เดฐเดพเดเดพเดตเต.",
    "เดเดณเดฟเดเตเดเดฒเตเดฒเต เดเดณเดฟเดเตเดเดพเตฝ เดเดพเตป เดคเตเดฑเตเดฑเดฟเดเตเดเตเดฎเต เดชเตเดณเดฟเดฎเดพเดเตเด....",
    "เดฎเตเดฎเดเตเดเต เดเดฐเต เดฌเดฟเดฏเดฑเดพ เดเดพเดเตเดเดฟเดฏเดพเดฒเต...",
    "เด เดชเดฟเดจเตเดจเต เดจเต เดเดเตเดเต เดชเตเดฐเตเดฎเดฟเดเตเดเตเดฎเตเดชเตเตพ เดเดคเต เดชเตเดฐเดฃเดฏเด.... เดจเดฎเตเดฎเตพ เดเดเตเดเต เดชเตเดฐเตเดฎเดฟเดเตเดเตเดฎเตเดชเตเตพ เดเดคเต เดเดฎเตเดชเดฟ...",
    "เดเดณเตเดณเดเดฟเดเตเดเตเดจเตเดจเดตเดจเดฒเตเดฒเต เดเดฐเดฟเดฎเตเดจเดฟเดจเตเดฑเต เดธเตเดตเดพเดฆเดฑเดฟเดฏเต.....",
    "เดกเดพ เดตเดฟเดเดฏเดพ เดจเดฎเตเดเตเดเตเดจเตเดคเดพ เด เดฌเตเดฆเตเดงเดฟ เดจเตเดฐเดคเตเดคเต เดคเตเดจเตเดจเดพเดคเดฟเดฐเตเดจเตเดจเดคเต...!",
    "เดเดคเตเดฐเตเด เดเดพเดฒเด เดเดตเดฟเดเต เดเดฏเดฟเดฐเตเดจเตเดจเต....!",
    "เดฆเตเดตเดฎเต เดเดจเตเดจเต เดฎเดพเดคเตเดฐเด เดฐเดเตเดทเดฟเดเตเดเดฃเต....",
    "เดเดจเดฟเดเตเดเดฑเดฟเดฏเดพเด เดเดตเดจเตเดฑเต เดเดเตเดเดจเตเดฑเต เดชเตเดฐเต เดญเดตเดพเดจเดฟเดฏเดฎเตเดฎ เดเดจเตเดจเดพ....",
    "เดกเดพ เดฆเดพเดธเดพ... เดเดคเดพ เด เดเดฒเดตเดฒเดพเดคเดฟ.....",
    "เดเดชเตเดชเตเดฎเดพเดตเดฟเดจเตเดฑเต เดเดเดเตเดฒเตเดทเต เดธเดพเตพเดเต เดฎเดเดเต เดเตเดฐเต.....",
    "เดฎเดเตเดเดณเต.. เดฐเดพเดเดธเตเดฅเดพเตป เดฎเดฐเตเดญเตเดฎเดฟเดฏเดฟเดฒเตเดเตเดเต เดฎเดฃเดฒเต เดเดฏเดฑเตเดฑเดฟเดตเดฟเดเดพเตป เดจเตเดเตเดเดฒเตเดฒเต.....",
    "เดจเดฟเดจเตเดฑเต เดเดเตเดเดจเดพเดเดพ เดชเตเตพ เดฌเดพเตผเดฌเตผ....",
    "เดเดพเตผ เดเตปเดเดฟเตป เดเดเตเดเต เดเดเดชเตเดฒเตเดฑเตเดฑเตโเดฒเดฟ.....",
    "เดเดคเต เดเดฃเตเดฃเต เดเดคเต เดเดพเดจเตเดคเดฎเต...",
    "เดจเดพเดฒเดพเดฎเดคเตเดคเต เดชเตเดเตเดเดฟเตฝ เดเดธเตโเดเตเดฏเตเดฌเตเดธเต เดตเตเดดเตเดจเตเดจเดคเดฟเดจเต เดฎเตเตปเดชเต เดเดพเตป เดเดตเดฟเดเต เดเดคเตเดคเตเด.....",
    "เดเดตเดณเต เดเตผเดคเตเดคเต เดเตเดเดฟเดเตเด เดเดฒเตเดฒเตเด เดจเดจเดเตเด เดฎเดดเดฏเตเด เดตเตเดธเตเดฑเตเดฑเต....",
    "เดเดจเตเดจเตเดเต เดชเดฑ เด เดฒเดตเต เดฏเต เดจเตเดจเต....",
    "เดเดฒเตเดฒ เดเดคเดพเดฐเต เดตเดพเดฐเตเดฏเดเดชเดฟเดณเตเดณเดฟเดฏเดฟเดฒเต เดฎเตเดจเดพเดเตเดทเดฟ เดเดฒเตเดฒเดฏเต... เดเดจเตเดคเดพ เดฎเตเดณเต เดธเตเดเตเดเตเดเดฑเดฟเดฒเต.... "
  
)

SING_STRINGS = (
    "๐ถ เดเดฐเตเดจเดพเตพ เดคเดฐเดณเดฎเดฟเดตเดจเดฟเตฝ... เดชเดเดฐเต เดตเดจเดฒเดคเดฟเดเดฏเดพเดฏเต... เดฎเตเดฑเตเดเต... เดฎเดคเดฟเดตเดฐเตเดตเตเดณเด เดธเดเต... ๐ถเดจเต",
    "๐ถ เดเดดเดฒเดฟเดจเตเดฑเต เดเดดเดเตเดเดณเดฟเตฝ เดเดตเตพ เดฎเดพเดเตเดเตเดชเตเดฏเต... เดจเตเดตเดฟเดจเตเดฑเต เดคเตเดฐเดเตเดเดณเดฟเตฝ เดเดพเตป เดฎเดพเดคเตเดฐเดฎเดพเดฏเต... ๐ถ",
    "๐ถ เดเดตเดฃเดฟเดชเตเดชเตเดจเตเดจเตเดเตเดเดพเดฒเดพเดเดฟเดเตเดเดพเด เดจเดฟเดจเตเดจเต เดเดพเตป... เดเดฏเดฟเดฒเตเดฒเตเดฏเด เดเดพเดตเดฟเดฒเต เดตเตเดฃเตเดฃเดฟเดฒเดพเดตเต... ๐ถ",
    "๐ถ เดเดจเตเดฆเตเดฐเดจเตเดฒเดฟเดฎเดฏเตเดฒเตเด เด เดฎเดฟเดดเดฟ เดชเตเดฏเตเดเดเดณเดฟเตฝ... เดเดจเตเดจเดฒเต เดจเดฟเตป เดฎเตเดเด เดจเต เดจเตเดเตเดเดฟ เดจเดฟเดจเตเดจเต... ๐ถ",
    "๐ถ เดฎเดฏเดฟเดฒเดพเดฏเต เดชเดฑเดจเตเดจเตเดตเดพ เดฎเดดเดตเดฟเดฒเตเดฒเต เดคเตเตฝเดเตเดเตเดฎเตเดจเตเดจเดดเดเต... ๐ถ",
    "๐ถ เดจเดฟเดฒเดพเดตเดฟเดจเตเดฑเต เดจเตเดฒเดญเดธเตเดฎ เดเตเดฑเดฟเดฏเดฃเดฟเดเตเดเดตเดณเต... เดเดพเดคเดฟเดฒเตเดฒเดเตเดเดฎเตเดฎเดฒเดฟเดเตเดเต เดเตเดฃเตเดเตเดเดฟ เดจเดฟเดจเตเดจเดตเดณเต... ๐ถ",
    "๐ถ เดจเตเดฏเตเดฐเต เดชเตเดดเดฏเดพเดฏเต เดคเดดเตเดเตเดฎเตเดชเตเตพ เดเดพเตป เดชเตเดฐเดฃเดฏเด เดตเดฟเดเดฐเตเด เดเดฐเดฏเดพเดตเตเด... ๐ถ",
    "๐ถ เดเดฐเดฟเดเดฟเตฝ เดจเตเดฏเตเดฃเตเดเดพเดฏเดฟเดฐเตเดจเตเดจเตเดเตเดเดฟเดฒเตเดจเตเดจเต เดเดพเตป... เดเดฐเตเดฎเดพเดคเตเดฐ เดตเตเดฑเตเดคเต เดจเดฟเดจเดเตเดเตเดชเตเดฏเดฟ... ๐ถ",
    "๐ถ เดเดคเตเดฐเดฏเต เดเดจเตเดฎเดฎเดพเดฏเต เดจเดฟเดจเตเดจเตเดเดพเตป เดคเตเดเตเดจเตเดจเต... เดเดคเตเดฐเดฎเตเตฝ เดเดทเตเดเดฎเดพเดฏเต เดจเดฟเดจเตเดจเตเดฏเตเตป เดชเตเดฃเตเดฏเดฎเต... ๐ถ",
    "๐ถ เดฎเดดเดคเตเดคเตเดณเตเดณเดฟเดเตพ เดชเตเดดเดฟเดเตเดเตเดเตเดฎเต เดจเดพเดเตป เดตเดดเดฟ... เดจเดจเดเตเดเตเดเดฟเดฏเตเตป เดเตเดเดเตเดเตเดดเดฟเตฝ เดจเต เดตเดจเตเดจ เดจเดพเตพ... ๐ถเดเต",
    "๐ถ เดเดฐเดณเต เดจเดฟเตป เดเต เดชเดฟเดเดฟเดเตเดเดพเตฝ, เดเดเดฒเตเดณเด เดตเตเดฃเตเดฃเดฟเดฒเดพเดตเต... เดเตพเดเตเดเดฃเตเดฃเดฟเตป เดเดพเดดเตเดเดฏเดฟเตฝ เดจเต, เดเตเดฑเตเดเตเดจเตเดจเตเดฐเต เดตเตเตบเดชเดฟเดฑเดพเดตเต.. ๐ถ.",
    "๐ถ เดฎเดฑเดจเตเดจเดฟเดเตเดเตเดฎเตเดจเตเดคเดฟเดจเต เดฎเดจเดธเตเดธเดฟเตฝ เดคเตเดณเตเดฎเตเดชเตเดจเตเดจเต เดฎเตเดจเดพเดจเตเดฐเดพเดเดคเตเดคเดฟเตป เดฒเตเดฒเดญเดพเดตเด... ๐ถ",
    "๐ถ เดฎเดดเดเตเดเดพเดฒเด เดเดจเดฟเดเตเดเดพเดฏเดฟ เดฎเดฏเดฟเตฝ เดเตเดฒเตเดณเตเดณ เดชเตเดฃเตเดฃเต เดจเดฟเดจเตเดจเตเดคเตเดคเดจเตเดจเต... ๐ถ",
    "๐ถ เดฎเดฟเดดเดฟเดฏเดฑเดฟเดฏเดพเดคเต เดตเดจเตเดจเต เดจเต เดฎเดฟเดดเดฟเดฏเตเดเตเดเดพเดฒเดฟเตฝ... เดเดจเดตเดฑเดฟเดฏเดพเดคเตเดฏเตเดคเต เดเดฟเดจเดพเดตเต เดชเตเดฒเต... ๐ถ",
    "๐ถ เดเดจเตเดฆเดจเดเตเดเตเดฒเดฏเดฟเตฝ เดฎเตเดเตเดเดฟเดจเตเดฐเดพเดเดฟเดฏเตเตป เดเดณเดฎเดพเตป เดเดฟเดเดพเดตเต เดเดฑเดเตเดเดฎเดพเดฏเต... ๐ถ",
    "๐ถ เดเดฑเตเดคเตเดคเดชเตเดฃเตเดฃเต เดจเดฟเดจเตเดจเต เดเดพเดฃเดพเดเตเดเดฟเดเตเดเตเดฐเต เดจเดพเดณเตเดฃเตเดเต... ๐ถ",
    "๐ถ เดคเดพเดฎเดฐเดชเตเดชเตเดตเดฟเตฝ เดตเดพเดดเตเด เดฆเตเดตเดฟเดฏเดฒเตเดฒเต เดจเต... เดชเตเดจเดฟเดฒเดพเดเตเดเดเดตเดฟเตฝ เดชเตเดเตเดเตเด เดชเตเดฃเตเดฏเดฎเดฒเตเดฒเต เดจเต... ๐ถ",
    "๐ถ เดชเดพเดเด เดชเตเดคเตเดคเดเดพเดฒเด เดชเดพเดเดพเตป เดตเดจเตเดจเต เดจเตเดฏเตเด... ๐ถ",
    "๐ถ เดฐเดพเดเดนเดเดธเดฎเต เดฎเดดเดตเดฟเตฝ เดเตเดเดฟเดฒเดฟเตฝ... เดธเตเดจเตเดนเดฆเตเดคเตเดฎเดพเดฏเต เดตเดฐเตเดฎเต... ๐ถ",
    "๐ถ เดชเดคเตเดคเตเดตเตเดณเตเดชเตเดชเดฟเดจเต เดฎเตเดฑเตเดฑเดคเตเดคเต เดจเดฟเดเตเดเดฃ เดเดธเตเดคเตเดฐเดฟ เดฎเตเดฒเตเดฒเดฏเตเดเตเดเต เดเดพเดคเตเดคเตเดเตเดคเตเดคเต... เดเดจเตเดฑเต เดเดธเตเดคเตเดฐเดฟ เดฎเตเดฒเตเดฒเดฏเตเดเตเดเต เดเดพเดคเตเดคเตเดเตเดคเตเดคเต... ๐ถ",
    "๐ถ เดฎเดเตเดเตพ เดชเตเดฐเดธเดพเดฆเดตเตเด เดจเตเดฑเตเดฑเดฟเดฏเดฟเตฝ เดเดพเตผเดคเตเดคเดฟ... เดฎเดเตเดเดเตเดเตเดฑเดฟเดฎเตเดฃเตเดเต เดเตเดฑเตเดฑเดฟ... ๐ถ",
    "๐ถ เดเดจเตเดคเดฟเดชเตเดชเตเตปเดตเตเดเตเดเด เดเดเดฒเดฟเตฝ เดฎเตเดฒเตเดฒเตเดคเตเดคเดพเดดเตเดฎเตเดชเตเตพ... เดฎเดพเดจเดคเตเดคเต เดฎเตเดฒเตเดฒเดคเตเดคเดฑเดฏเดฟเดฒเต เดฎเดพเดฃเดฟเดเตเดฏเดเตเดเตเดชเตเดชเต... ๐ถ",
    "๐ถ เดเดฎเตเดชเดฒเดชเตเดชเตเดดเต เดเดฃเตเดฃเดฟเดเตเดเดฃเตเดฃเดจเตเดเต เดจเต... เดเดจเตเดคเตเดชเดฐเดฟเดญเดตเด เดฎเตเดฒเตเดฒเตเดฏเตเดคเดฟเดตเดจเตเดจเตเดตเต... ๐ถ",
    "๐ถ เดเดเดเดพเดฆเตเดฐเดฟเดฏเดฟเตฝ เดเตเดเดเตเดเตเดฎเดพ เดเตเดเดฎเดเตเดเตเดชเตเดฒเตเดฏเต เดชเตเดฐเดฃเดฏเด... เดคเดดเตเดเตเดจเตเดจเต, เดเดจเตเดจเต เดชเตเดฃเดฐเตเดจเตเดจเต... ๐ถ",
    "๐ถ เดถเดฏเดพเดฎเดพเดเดฌเดฐเด เดชเตเตฝเดเตเดจเตเดจเตเดฐเดพ เดตเตเตบเดเดจเตเดฆเตเดฐเดจเดพเดฏเต เดจเดฟเตป เดชเตเดฎเตเดเด... ๐ถ",
    "๐ถ เดถเดฐเตเดฐเดพเดเดฎเต เดคเตเดเตเดจเตเดจเดฟเดคเตเตป เดตเตเดฃเดคเตป เดชเตเตป เดคเดจเตเดคเตเดฐเดฟเดฏเดฟเตฝ... ๐ถ",
    "๐ถ เดเดจเตเดคเดฟเดจเต เดตเตเดฑเตเดฐเต เดธเตเดฐเตเดฏเตเดฆเดฏเด... เดจเตเดฏเตเตป เดชเตเดจเตเดจเตเดทเดธเตเดธเดจเตเดงเตเดฏเดฏเดฒเตเดฒเต... ๐ถ",
    "๐ถ เดเดจเตเดฐเดพเดเดฟเดฃเต เดเดคเดพเดฏเตเตป เดเดฐเดณเดฟเตฝ เดตเดฟเดฐเดฟเดเตเด เดชเตเดเตเดเตพ... ๐ถ",
    "๐ถ เดชเดพเดเดพเด เดจเดฎเตเดเตเดเต เดชเดพเดเดพเด... เดตเตเดฃเตเดเตเดฎเตเดฐเต เดชเตเดฐเตเดฎเดเดพเดจเด... ๐ถ",
    "๐ถ เดเดฒเตเดฒเดฟเดฎเดฒเตผ เดเดพเดตเดฟเตฝ เดชเตเดฐเด เดเดพเดฃเดพเตป... เดเดจเตเดจเต เดจเดฎเตเดฎเตพ เดชเตเดฏเดฟ เดฐเดพเดตเดฟเตฝ เดจเดฟเดฒเดพเดตเดฟเตฝ... ๐ถ",
    "๐ถ เดเดฑเตเดเดตเดฏเตฝ เดเตเดฐเตเดตเต... เดฎเตเดฑเดฟเดตเดพเดฒเตป เดเตเดฐเตเดตเต... เดคเดณเดฟเตผ เดตเตเดฑเตเดฑเดฟเดฒเดฏเตเดฃเตเดเต... เดตเดฐเดฆเดเตเดทเดฟเดฃ เดตเตเดเตเดเดพเตป... "
    "๐ถ เดเดจเตเดจเดฟเดฎเดฃเดฟเดเตเดเตเดชเตเดชเต เดคเตเดฑเดจเตเดจเตเดฃเตเดฃเดฟ เดจเตเดเตเดเตเด เดจเตเดฐเด, เดชเดฟเดจเตเดจเดฟเตฝเดตเดจเตเดจเต เดเดฃเตเดฃเต เดชเตเดคเตเดคเตเด เดเดณเตเดณเดจเตเดเตเดเต เดชเตเดฏเดฟ... ๐ถ "
    "เดเดฟเดเดเต เดฒเดเตปเดกเต เดเดฏเดฟเตผ @legendoftelegram @ZMOVIES10 โค๏ธโค๏ธโค๏ธโค๏ธ "
    
)

SLAP_TEMPLATES = (
    "{user1} {user2} เดจเต เดเตเดฑเตเดฑเดฟเด เดเตเดฃเตเดเต เดคเดฒเดเตเดเดเดฟเดเตเดเต.",
    "{user1} เดคเดเดฟเดเตเดเดทเดฃเด เดเตเดฃเตเดเต {user2} เดตเดฟเดจเตเดฑเต เดฎเตเดเดคเตเดคเต เดเดเดฟเดเตเดเต. ",
    "{user1} {user2} เดจเต เดเดพเดฒเดฟเตฝ เดชเดฟเดเดฟเดเตเดเต เดเดฑเดเตเดเดฟ เดเดฑเดฟเดเตเดเต ",
    "{user1} เดตเดฒเดฟเดฏ เดเดฐเต เดเดฒเตเดฒเต เดเดเตเดคเตเดคเต {user2} เดตเดฟเดจเตเดฑเต เดคเดฒเดฏเดฟเดฒเตเดเตเดเต เดเดเตเดเต",
    "{user1} เดเดฐเต เดตเดฒเดฟเดฏ เดชเดพเดคเตเดฐเด เดเดเตเดคเตเดคเต {user2} เดตเดฟเดจเตเดฑเต เดฎเตเดเดคเตเดคเต เดเดเตเดเดเดฟเดเตเดเต.",
    "{user1} {user2} เดตเดฟเดจเตเดฑเต เดคเดฒเดเตเดเต เดเดฐเตเดฎเตเดชเต เดชเตเดชเตเดชเต เดตเตเดเตเดเดเดฟเดเตเดเต.",
    "{user1} เดญเดฟเดคเตเดคเดฟเดฏเดฟเตฝ เดคเตเดเตเดเดฟเดฏเดฟเดเตเดเดฟเดฐเตเดจเตเดจ เดเตเดฒเตเดเตเดเต เดเดเตเดคเตเดคเต {user2} เดตเดฟเดจเตเดฑเต เดชเตเดฐเดงเดพเดจ เดญเดพเดเดคเตเดคเต เดเดเดฟเดเตเดเต .",
    "{user1} {user2} เดตเดฟเดจเต เดเตเดจเดฟเดเตเดเต เดจเดฟเตผเดคเตเดคเดฟ เดตเดฒเดฟเดฏเตเดฐเต เดคเดเดฟเดเตเดเดทเดฃเด เดฎเตเดคเตเดเดคเตเดคเดฟเดเตเดเต",
    "{user1} เดเดฐเต เดเดฐเตเดฎเตเดชเดฟเดจเตเดฑเต เดเดธเตเดฐ เดเดเตเดคเตเดคเต {user2} เดจเตเดฑเต เดคเดฒเดเตเดเต เดเดเดฟเดเตเดเต..",
    "{user1} {user2} เดจเต เดฎเดฐเดคเตเดคเดฟเตฝ เดเตเดเตเดเดฟเดฏเดฟเดเตเดเต เดเดพเดฒเดฟเตฝ เดคเต เดเตเดเตเดคเตเดคเต..."
    
)

ITEMS = (
    "cast iron skillet",
    "large trout",
    "baseball bat",
    "cricket bat",
    "wooden cane",
    "nail",
    "printer",
    "shovel",
    "CRT monitor",
    "physics textbook",
    "toaster",
    "portrait of Richard Stallman",
    "television",
    "five ton truck",
    "roll of duct tape",
    "book",
    "laptop",
    "old television",
    "sack of rocks",
    "rainbow trout",
    "rubber chicken",
    "spiked bat",
    "fire extinguisher",
    "heavy rock",
    "chunk of dirt",
    "beehive",
    "piece of rotten meat",
    "bear",
    "ton of bricks",
)

THROW = (
    "เดเดฑเดฟเดเตเดเต",
    "เดตเดฟเดเตเดทเตเดชเดฟเดเตเดเต",
    "เดคเดเตเดเดฟ",
    "เดตเตเดถเดฟเดฏเตเดฑเดฟเดเตเดเต",
)

HIT = (
    "เดเดเดฟเดเตเดเต",
    "เดถเดเตเดคเดฟเดฏเดพเดฏเดฟ เดชเตเดฐเดนเดฐเดฟเดเตเดเต",
    "เดคเดฒเตเดฒเดฟ",
    "เดเดเดฟเดเตเดเต",
    "เดคเตเดดเดฟเดเตเดเต",
)

GMAPS_LOC = "https://maps.googleapis.com/maps/api/geocode/json"
GMAPS_TIME = "https://maps.googleapis.com/maps/api/timezone/json"


@run_async
def runs(bot: Bot, update: Update):
    update.effective_message.reply_text(random.choice(RUN_STRINGS))

    if message.reply_to_message:
      message.reply_to_message.reply_text(RUN_STRINGS)
    else:
      message.reply_text(RUN_STRINGS)

@run_async
def sing(bot: Bot, update: Update):
    update.effective_message.reply_text(random.choice(SING_STRINGS))

    if message.reply_to_message:
      message.reply_to_message.reply_text(SING_STRINGS)
    else:
      message.reply_text(SING_STRINGS)  

@run_async
def slap(bot: Bot, update: Update, args: List[str]):
    msg = update.effective_message  # type: Optional[Message]

    # reply to correct message
    reply_text = msg.reply_to_message.reply_text if msg.reply_to_message else msg.reply_text

    # get user who sent message
    if msg.from_user.username:
        curr_user = "@" + escape_markdown(msg.from_user.username)
    else:
        curr_user = "[{}](tg://user?id={})".format(msg.from_user.first_name, msg.from_user.id)

    user_id = extract_user(update.effective_message, args)
    if user_id:
        slapped_user = bot.get_chat(user_id)
        user1 = curr_user
        if slapped_user.username:
            user2 = "@" + escape_markdown(slapped_user.username)
        else:
            user2 = "[{}](tg://user?id={})".format(slapped_user.first_name,
                                                   slapped_user.id)

    # if no target found, bot targets the sender
    else:
        user1 = "[{}](tg://user?id={})".format(bot.first_name, bot.id)
        user2 = curr_user

    temp = random.choice(SLAP_TEMPLATES)
    item = random.choice(ITEMS)
    hit = random.choice(HIT)
    throw = random.choice(THROW)

    repl = temp.format(user1=user1, user2=user2, item=item, hits=hit, throws=throw)

    reply_text(repl, parse_mode=ParseMode.MARKDOWN)


@run_async
def get_bot_ip(bot: Bot, update: Update):
    """ Sends the bot's IP address, so as to be able to ssh in if necessary.
        OWNER ONLY.
    """
    res = requests.get("http://ipinfo.io/ip")
    update.message.reply_text(res.text)

@run_async
def extra(bot: Bot, update: Update):
    update.message.reply_text("เดเตเดเตเดเดฃเตเด เดตเตผเดเตเดเดพเดตเตเดฒเตเดฒ.. ๐๐๐๐ ")
    
@run_async
def get_id(bot: Bot, update: Update, args: List[str]):
    user_id = extract_user(update.effective_message, args)
    if user_id:
        if update.effective_message.reply_to_message and update.effective_message.reply_to_message.forward_from:
            user1 = update.effective_message.reply_to_message.from_user
            user2 = update.effective_message.reply_to_message.forward_from
            update.effective_message.reply_text(
                "The original sender, {}, has an ID of `{}`.\nThe forwarder, {}, has an ID of `{}`.".format(
                    escape_markdown(user2.first_name),
                    user2.id,
                    escape_markdown(user1.first_name),
                    user1.id),
                parse_mode=ParseMode.MARKDOWN)
        else:
            user = bot.get_chat(user_id)
            update.effective_message.reply_text("{}'s id is `{}`.".format(escape_markdown(user.first_name), user.id),
                                                parse_mode=ParseMode.MARKDOWN)
    else:
        chat = update.effective_chat  # type: Optional[Chat]
        if chat.type == "private":
            update.effective_message.reply_text("Your id is `{}`.".format(chat.id),
                                                parse_mode=ParseMode.MARKDOWN)

        else:
            update.effective_message.reply_text("This group's id is `{}`.".format(chat.id),
                                                parse_mode=ParseMode.MARKDOWN)


@run_async
def info(bot: Bot, update: Update, args: List[str]):
    msg = update.effective_message  # type: Optional[Message]
    user_id = extract_user(update.effective_message, args)

    if user_id:
        user = bot.get_chat(user_id)

    elif not msg.reply_to_message and not args:
        user = msg.from_user

    elif not msg.reply_to_message and (not args or (
            len(args) >= 1 and not args[0].startswith("@") and not args[0].isdigit() and not msg.parse_entities(
        [MessageEntity.TEXT_MENTION]))):
        msg.reply_text("I can't extract a user from this.")
        return

    else:
        return

    text = "<b>User info</b>:" \
           "\nID: <code>{}</code>" \
           "\nFirst Name: {}".format(user.id, html.escape(user.first_name))

    if user.last_name:
        text += "\nLast Name: {}".format(html.escape(user.last_name))

    if user.username:
        text += "\nUsername: @{}".format(html.escape(user.username))

    text += "\nPermanent user link: {}".format(mention_html(user.id, "link"))

    if user.id == OWNER_ID:
        text += "\n\nhe โค๏ธis โค๏ธmy โค๏ธowner โค๏ธ!"
    else:
        if user.id in SUDO_USERS:
            text += "\nthis man is a  SUDO USER ๐" \
                    "I've never considered myself as a legend ๐งก- just a simple man with heart.๐งก"
        else:
            if user.id in SUPPORT_USERS:
                text += "\nthis man is a SUPPORT USER .. ! " \
                        "this man can gban ๐."

            if user.id in WHITELIST_USERS:
                text += "\nhe is  WHITELISTED ...! " \
                        "cant ban/kick .... ๐"

    for mod in USER_INFO:
        mod_info = mod.__user_info__(user.id).strip()
        if mod_info:
            text += "\n\n" + mod_info

    update.effective_message.reply_text(text, parse_mode=ParseMode.HTML)


@run_async
def get_time(bot: Bot, update: Update, args: List[str]):
    location = " ".join(args)
    if location.lower() == bot.first_name.lower():
        update.effective_message.reply_text("Its always banhammer time for me!")
        bot.send_sticker(update.effective_chat.id, BAN_STICKER)
        return

    res = requests.get(GMAPS_LOC, params=dict(address=location))

    if res.status_code == 200:
        loc = json.loads(res.text)
        if loc.get('status') == 'OK':
            lat = loc['results'][0]['geometry']['location']['lat']
            long = loc['results'][0]['geometry']['location']['lng']

            country = None
            city = None

            address_parts = loc['results'][0]['address_components']
            for part in address_parts:
                if 'country' in part['types']:
                    country = part.get('long_name')
                if 'administrative_area_level_1' in part['types'] and not city:
                    city = part.get('long_name')
                if 'locality' in part['types']:
                    city = part.get('long_name')

            if city and country:
                location = "{}, {}".format(city, country)
            elif country:
                location = country

            timenow = int(datetime.utcnow().strftime("%s"))
            res = requests.get(GMAPS_TIME, params=dict(location="{},{}".format(lat, long), timestamp=timenow))
            if res.status_code == 200:
                offset = json.loads(res.text)['dstOffset']
                timestamp = json.loads(res.text)['rawOffset']
                time_there = datetime.fromtimestamp(timenow + timestamp + offset).strftime("%H:%M:%S on %A %d %B")
                update.message.reply_text("It's {} in {}".format(time_there, location))


@run_async
def echo(bot: Bot, update: Update):
    args = update.effective_message.text.split(None, 1)
    message = update.effective_message
    if message.reply_to_message:
        message.reply_to_message.reply_text(args[1])
    else:
        message.reply_text(args[1], quote=False)
    message.delete()

def ping(bot: Bot, update: Update):
    start_time = time.time()
    bot.send_message(update.effective_chat.id, "Starting ping testing now!")
    end_time = time.time()
    ping_time = float(end_time - start_time)*1000
    update.effective_message.reply_text(" Ping speed was : {}ms".format(ping_time))

@run_async
def reply_keyboard_remove(bot: Bot, update: Update):
    reply_keyboard = []
    reply_keyboard.append([
        ReplyKeyboardRemove(
            remove_keyboard=True
        )
    ])
    reply_markup = ReplyKeyboardRemove(
        remove_keyboard=True
    )
    old_message = bot.send_message(
        chat_id=update.message.chat_id,
        text='trying',
        reply_markup=reply_markup,
        reply_to_message_id=update.message.message_id
    )
    bot.delete_message(
        chat_id=update.message.chat_id,
        message_id=old_message.message_id
    )


MARKDOWN_HELP = """
Markdown is a very powerful formatting tool supported by telegram. {} has some enhancements, to make sure that \
saved messages are correctly parsed, and to allow you to create buttons.

- <code>_italic_</code>: wrapping text with '_' will produce italic text
- <code>*bold*</code>: wrapping text with '*' will produce bold text
- <code>`code`</code>: wrapping text with '`' will produce monospaced text, also known as 'code'
- <code>[sometext](someURL)</code>: this will create a link - the message will just show <code>sometext</code>, \
and tapping on it will open the page at <code>someURL</code>.
EG: <code>[test](example.com)</code>

- <code>[buttontext](buttonurl:someURL)</code>: this is a special enhancement to allow users to have telegram \
buttons in their markdown. <code>buttontext</code> will be what is displayed on the button, and <code>someurl</code> \
will be the url which is opened.
EG: <code>[This is a button](buttonurl:example.com)</code>

If you want multiple buttons on the same line, use :same, as such:
<code>[one](buttonurl://example.com)
[two](buttonurl://google.com:same)</code>
This will create two buttons on a single line, instead of one button per line.

Keep in mind that your message <b>MUST</b> contain some text other than just a button!
""".format(dispatcher.bot.first_name)


@run_async
def markdown_help(bot: Bot, update: Update):
    update.effective_message.reply_text(MARKDOWN_HELP, parse_mode=ParseMode.HTML)
    update.effective_message.reply_text("Try forwarding the following message to me, and you'll see!")
    update.effective_message.reply_text("/save test This is a markdown test. _italics_, *bold*, `code`, "
                                        "[URL](example.com) [button](buttonurl:github.com) "
                                        "[button2](buttonurl://google.com:same)")


@run_async
def stats(bot: Bot, update: Update):
    update.effective_message.reply_text("Current stats:\n" + "\n".join([mod.__stats__() for mod in STATS]))


# /ip is for private use
__help__ = """
 - /id: get the current group id. If used by replying to a message, gets that user's id.
 - /rmkeyboard: Helps you to remove Bot Keyboards from chats... Kanged from @MidukkiBot.
 - /runs: reply a random string from an array of replies.
 - /slap: slap a user, or get slapped if not a reply.
 - /time <place>: gives the local time at the given place.
 - /info: get information about a user.

 - /markdownhelp: quick summary of how markdown works in telegram - can only be called in private chats.
"""

__mod_name__ = "โค๏ธothersโค๏ธ"

ID_HANDLER = DisableAbleCommandHandler("id", get_id, pass_args=True)
IP_HANDLER = CommandHandler("ip", get_bot_ip, filters=Filters.chat(OWNER_ID))

TIME_HANDLER = CommandHandler("time", get_time, pass_args=True)

RUNS_HANDLER = DisableAbleCommandHandler("runs", runs)
SING_HANDLER = DisableAbleCommandHandler("sing","sings", sing)
SLAP_HANDLER = DisableAbleCommandHandler("slap", slap, pass_args=True)
INFO_HANDLER = DisableAbleCommandHandler("info", info, pass_args=True)

PING_HANDLER = DisableAbleCommandHandler("ping", ping)
EXTRA_HANDLER = CommandHandler("lol", extra)
ECHO_HANDLER = CommandHandler("echo", echo, filters=Filters.user(OWNER_ID))
MD_HELP_HANDLER = CommandHandler("markdownhelp", markdown_help, filters=Filters.private)
RMKEYBOARD_HANDLER = DisableAbleCommandHandler("rmkeyboard", reply_keyboard_remove)
STATS_HANDLER = CommandHandler("stats", stats, filters=CustomFilters.sudo_filter)

dispatcher.add_handler(ID_HANDLER)
dispatcher.add_handler(PING_HANDLER)
dispatcher.add_handler(IP_HANDLER)
dispatcher.add_handler(EXTRA_HANDLER)
dispatcher.add_handler(TIME_HANDLER)
dispatcher.add_handler(RUNS_HANDLER)
dispatcher.add_handler(SING_HANDLER)
dispatcher.add_handler(SLAP_HANDLER)
dispatcher.add_handler(INFO_HANDLER)
dispatcher.add_handler(ECHO_HANDLER)
dispatcher.add_handler(MD_HELP_HANDLER)
dispatcher.add_handler(STATS_HANDLER)
dispatcher.add_handler(RMKEYBOARD_HANDLER)
